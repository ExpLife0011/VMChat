apply plugin: 'com.android.application'

// 定义全局变量，放置一些敏感信息保存在配置文件
ext {
    mEMAppkey = ''
    mTDAppId = ''
}

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.3'

    //use legacy for for android 6.0
    //    useLibrary 'org.apache.http.legacy'
    defaultConfig {
        applicationId 'com.vmloft.develop.app.chat'
        minSdkVersion 21
        targetSdkVersion 22
        versionCode 1
        versionName '1.0.0'
        // 开启分包
        multiDexEnabled true
    }

    // 签名信息
    signingConfigs {
        // debug 打包签名信息
        debug {
            keyAlias 'debugKey'
            keyPassword '123123'
            storeFile file('debug-keystore.jks')
            storePassword '123123'
        }
        //  release 打包签名信息，因为签名文件是保密信息，放在一个配置文件中进行读取，这个文件不会再版本库里存在
        release {
            keyAlias
            keyPassword
            storeFile
            storePassword
        }
    }
    // 获取签名配置信息
    initProjectConfigs()

    // 编译配置
    buildTypes {
        debug {
            // 简单粗暴解决多个库出现 UnsatisfiedLinkError 文件错误问题
            ndk {
                abiFilters "armeabi-v7a"
            }
            // 是否开启压缩
            zipAlignEnabled false
            // 是否开启混淆
            minifyEnabled false
            // 设置debug的签名
            signingConfig signingConfigs.debug
        }
        release {
            // 简单粗暴解决多个库引用 jni 库出现 UnsatisfiedLinkError 文件错误问题
            ndk {
                abiFilters "armeabi-v7a"
            }
            // 是否开启压缩
            zipAlignEnabled true
            // 是否开启混淆
            minifyEnabled true
            // 打包时删除无用资源 依赖于混淆，必须和 minifyEnabled 一起使用
            shrinkResources true
            // 设置正式打包的签名
            signingConfig signingConfigs.release
            // 混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            //修改生成的apk名字，格式为 app-版本号-打包时间-渠道名-release.apk
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def oldFile = output.outputFile
                    if (variant.buildType.name.equals('release')) {
                        def releaseApkName = "app-v${defaultConfig.versionName}-${getTime()}-" + variant.productFlavors[0].name +
                                '-release.apk'
                        output.outputFile = new File(oldFile.parent, releaseApkName)
                    }
                }
            }
        }
    }

    // 文件路径映射配置
    sourceSets {
        main {
            // 设置Jni so文件路径 如果有jniLibs目录就不需要设置
            jniLibs.srcDirs = ['libs']
        }
    }

    // 多渠道打包配置
    productFlavors {
        Develop {
            manifestPlaceholders = [em_appkey: mEMAppkey, td_app_id: mTDAppId, td_channel_id: "Develop"]
        }
        "360" {
            manifestPlaceholders = [em_appkey: mEMAppkey, td_app_id: mTDAppId, td_channel_id: "360"]
        }
        GooglePlay {
            manifestPlaceholders = [em_appkey: mEMAppkey, td_app_id: mTDAppId, td_channel_id: "GooglePlay"]
        }
        XiaoMi {
            manifestPlaceholders = [em_appkey: mEMAppkey, td_app_id: mTDAppId, td_channel_id: "XiaoMi"]
        }
        WanDouJia {
            manifestPlaceholders = [em_appkey: mEMAppkey, td_app_id: mTDAppId, td_channel_id: "WanDouJia"]
        }
    }
    // 多渠道打包简介写法
    // productFlavors.all { flavor -> flavor.manifestPlaceholders = [td_channel_id: name]}
}

// 项目依赖，包含引入的第三方 SDK以及Android官方 Support 库
dependencies {
    // 引入项目 libs 目录下的各种第三方库，后边可以不用再单独添加
    compile fileTree(include: ['*.jar'], dir: 'libs')

    // Google Play Service 库，使用GCM推送需要
    compile 'com.google.android.gms:play-services-gcm:10.2.1'

    // 第三方图片加载库
    compile 'com.github.bumptech.glide:glide:3.7.0'
    // 支持手势缩放的ImageView
    compile 'com.bm.photoview:library:1.4.1'
    // square 家族的网络加载库 retrofit
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    // ButterKnife 库
    compile 'com.jakewharton:butterknife:8.6.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.6.0'

    // 引入自己封装的工具库 GitHub: https://github.com/lzan13/VMLibraryManager
    compile project(':vmtools')
}

// 读取配置文件，配置文件里记录的都是一些敏感信息，需要换成自己的
def initProjectConfigs() {
    // 设置要读取的配置文件
    def propFile = file('config.properties')
    if (propFile.canRead()) {
        def Properties props = new Properties()
        props.load(new FileInputStream(propFile))
        // 判断签名配置信息是否存在
        if (props != null &&
                props.containsKey('KEY_ALIAS') &&
                props.containsKey('KEY_PASSWORD') &&
                props.containsKey('STORE_FILE') &&
                props.containsKey('STORE_PASSWORD') &&
                props.containsKey('EM_APPKEY') &&
                props.containsKey("TD_APP_ID")) {
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            mEMAppkey = props['EM_APPKEY']
            mTDAppId = props['TD_APP_ID']
        } else {
            // 当配置文件签名项为空时，将 release 时的签名设置为null
            println 'config.properties 找不到签名项，检查配置文件'
            android.buildTypes.release.signingConfig = null
        }
    } else {
        // 当配置文件为空时，将 release 时的签名设置为null
        println 'config.properties 找不到配置文件'
        android.buildTypes.release.signingConfig = null
    }
}

// 获取当前系统时间
def getTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}