apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion 24
    buildToolsVersion '24.0.2'
    defaultConfig {
        applicationId 'net.melove.app.chat'
        minSdkVersion 15
        targetSdkVersion 22
        versionCode 1
        versionName '1.0.0'
    }

    // 配置签名信息
    signingConfigs {
        // Debug 使用默认签名
        debug {

        }
        // 发布时用自己的签名，这里因为是敏感信息，等下读取配置文件来设置
        release {
            storeFile
            storePassword
            keyAlias
            keyPassword
        }
    }
    // 获取签名配置信息
    optConfigs()

    buildTypes {
        debug {
            // 给debug包的包名加上后缀
//            applicationIdSuffix '.debug'
            signingConfig signingConfigs.debug
        }
        release {
            // 是否开启压缩
            zipAlignEnabled true
            // 是否开启混淆
            minifyEnabled true
            // 打包时删除无用资源 依赖于混淆，必须和 minifyEnabled 一起使用
            shrinkResources true
            // 设置正式打包的签名
            signingConfig signingConfigs.release
            // 混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            //修改生成的apk名字，格式为 app名_版本号_打包时间_渠道名_release.apk
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def oldFile = output.outputFile
                    if (variant.buildType.name.equals('release')) {
                        def releaseApkName = "MLChat_v${defaultConfig.versionName}_${releaseTime()}_" + variant.productFlavors[0].name + '_release.apk'
                        output.outputFile = new File(oldFile.parent, releaseApkName)
                    }
                }
            }
        }
    }
    // 文件路径映射配置
//    sourceSets {
//        main {
//            // 设置Jni so文件路径 如果有jniLibs目录就不需要设置
//            jniLibs.srcDirs = ['libs']
//        }
//    }

    // 多渠道打包配置
    productFlavors {
        wandoujia {}
        xiaomi {}
    }
    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [ML_CHANNEL_ID: name]
    }
}

/**
 * 项目依赖，包含引入的第三方 SDK以及Android官方 Support 库
 */
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    // 引入 ButterKnife 库
    apt 'com.jakewharton:butterknife-compiler:8.4.0'
    compile 'com.jakewharton:butterknife:8.4.0'
    /**
     *  新的遵循 Android  Material design 设计风格库，此扩展库已经包含了support-v4,appcomat-v7,recyclerView扩展库，
     *  如果引入了design，就不需要再单独引入其他库
     */
    compile 'com.android.support:design:24.2.1'
    // 解决方法数超过65536问题扩展库
    compile 'com.android.support:multidex:1.0.1'
    // Google Play Service 库，使用GCM推送需要
    compile 'com.google.android.gms:play-services-gcm:9.4.0'
    // LeakCanary Debug库，开源捕获内存溢出的库
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.4-beta2'
    // LeakCanary 发版的库
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'
    // 第三方图片加载库
    compile 'com.github.bumptech.glide:glide:3.7.0'
    // 观察者模式解耦库
    compile 'org.greenrobot:eventbus:3.0.0'
    // 支持手势缩放的ImageView
    compile 'com.bm.photoview:library:1.4.1'
    // 环信这边提供的 aar 方式引入的sdk
    //    compile 'com.hyphenate:hyphenate-sdk:3.1.5'
    // 引入各种第三方 SDK jar包，在上边 fileTree 里已经包含了libs，这里可以不用再单独添加
    compile files('libs/xiaomi_push_v303.jar')
    compile files('libs/huawei_push_v2705.jar')
    compile files('libs/talkingdata_analytics_v2230.jar')
    compile files('libs/hyphenatechat_3.2.0.jar')
}

//读取配置文件
def optConfigs() {
    // 设置要读取的配置文件
    def propFile = file('app-config.properties')
    if (propFile.canRead()) {
        def Properties props = new Properties()
        props.load(new FileInputStream(propFile))
        // 判断签名配置信息是否存在
        if (props != null && props.containsKey('ML_STORE_FILE')
                && props.containsKey('ML_STORE_PASSWORD')
                && props.containsKey('ML_KEY_ALIAS')
                && props.containsKey('ML_KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file(props['ML_STORE_FILE'])
            android.signingConfigs.release.storePassword = props['ML_STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['ML_KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['ML_KEY_PASSWORD']
        } else {
            // 当配置文件签名项为空时，将 release 时的签名设置为null
            println 'app-config.properties 找不到签名项，检查配置文件'
            android.buildTypes.release.signingConfig = null
        }
    } else {
        // 当配置文件为空时，将 release 时的签名设置为null
        println 'app-config.properties 找不到配置文件'
        android.buildTypes.release.signingConfig = null
    }
}

// 获取当前系统时间
def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}
