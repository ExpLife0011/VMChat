apply plugin: 'com.android.application'

// 定义全局变量，放置一些敏感信息保存在配置文件
ext {
    mEMAppkey = ''
    mTDAppId = ''
}

android {

    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId 'com.vmloft.develop.app.chat'
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName '1.0.0'
        // 简单粗暴解决多个库出现 UnsatisfiedLinkError 文件错误问题
        ndk {
            abiFilters "armeabi-v7a"
        }
    }

    // 签名信息
    signingConfigs {
        //  release 打包签名信息，因为签名文件是保密信息，放在一个配置文件中进行读取，这个文件不会再版本库里存在
        release {
            keyAlias
            keyPassword
            storeFile
            storePassword
        }
    }
    // 获取签名配置信息
    initProjectConfigs()

    // 编译配置
    buildTypes {
        debug {
            // 是否开启压缩
            zipAlignEnabled false
            // 是否开启混淆
            minifyEnabled false
        }
        release {
            // 是否开启压缩
            zipAlignEnabled true
            // 是否开启混淆
            minifyEnabled true
            // 打包时删除无用资源 依赖于混淆，必须和 minifyEnabled 一起使用
            shrinkResources true
            // 设置正式打包的签名
            signingConfig signingConfigs.release
            // 混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // 修改生成的 apk 名字，格式为:项目-版本-时间-渠道名.apk
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "VMChat.V${defaultConfig.versionName}.${getTime()}." + variant.productFlavors[0].name + '.apk'
                }
            }
        }
    }

    // 文件路径映射配置
    sourceSets {
        main {
            // 设置Jni so文件路径 如果有jniLibs目录就不需要设置
            jniLibs.srcDirs = ['libs']
        }
    }

    // 多渠道打包配置
    flavorDimensions "default"
    productFlavors {
        Develop {
            dimension = "default"
            manifestPlaceholders = [em_appkey: mEMAppkey, td_app_id: mTDAppId, td_channel_id: "Develop"]
        }
        Qihu360 {
            dimension = "default"
            manifestPlaceholders = [em_appkey: mEMAppkey, td_app_id: mTDAppId, td_channel_id: "360"]
        }
        GooglePlay {
            dimension = "default"
            manifestPlaceholders = [em_appkey: mEMAppkey, td_app_id: mTDAppId, td_channel_id: "GooglePlay"]
        }
        XiaoMi {
            dimension = "default"
            manifestPlaceholders = [em_appkey: mEMAppkey, td_app_id: mTDAppId, td_channel_id: "XiaoMi"]
        }
        WanDouJia {
            dimension = "default"
            manifestPlaceholders = [em_appkey: mEMAppkey, td_app_id: mTDAppId, td_channel_id: "WanDouJia"]
        }
    }
    // 多渠道打包简介写法
    // productFlavors.all { flavor -> flavor.manifestPlaceholders = [td_channel_id: name]}
}

// 项目依赖，包含引入的第三方 SDK以及Android官方 Support 库
dependencies {
    // 引入项目 libs 目录下的各种第三方库，后边可以不用再单独添加
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation 'com.android.support:design:28.0.0'

    // 图片加载库 Glide https://github.com/bumptech/glide
    implementation 'com.github.bumptech.glide:glide:3.7.0'
    // 网络加载库 Retrofit https://github.com/square/retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    // 控件注解库 ButterKnife https://github.com/JakeWharton/butterknife
    implementation 'com.jakewharton:butterknife:8.6.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.6.0'
    // 事件传递库 EventBus https://github.com/greenrobot/EventBus
    implementation 'org.greenrobot:eventbus:3.1.1'

    // 支持手势缩放的图片加载控件 PhotoView https://github.com/bm-x/PhotoView
    implementation 'com.bm.photoview:library:1.4.1'

    // 环信聊天 IM 库 Easemob http://www.easemob.com
    implementation 'com.hyphenate:hyphenate-sdk:3.5.5'

    // 自己封装的工具库 VMTools https://github.com/lzan13/VMLibrary
    implementation 'com.vmloft.library:vmtools:0.5.0'
}

// 读取配置文件，配置文件里记录的都是一些敏感信息，需要换成自己的
def initProjectConfigs() {
    // 设置要读取的配置文件
    def propFile = file('config.properties')
    if (propFile.canRead()) {
        def Properties props = new Properties()
        props.load(new FileInputStream(propFile))
        // 判断签名配置信息是否存在
        if (props != null &&
                props.containsKey('KEY_ALIAS') &&
                props.containsKey('KEY_PASSWORD') &&
                props.containsKey('STORE_FILE') &&
                props.containsKey('STORE_PASSWORD') &&
                props.containsKey('EM_APPKEY') &&
                props.containsKey("TD_APP_ID")) {
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            mEMAppkey = props['EM_APPKEY']
            mTDAppId = props['TD_APP_ID']
        } else {
            // 当配置文件签名项为空时，将 release 时的签名设置为null
            println 'config.properties 找不到签名项，检查配置文件'
            android.buildTypes.release.signingConfig = null
        }
    } else {
        // 当配置文件为空时，将 release 时的签名设置为null
        println 'config.properties 找不到配置文件'
        android.buildTypes.release.signingConfig = null
    }
}

// 获取当前系统时间
def getTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}